/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-07 06:44:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.freeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.*;
import java.sql.*;

public final class freeboard_005frsave02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/freeboard/conn_oracle.jsp", Long.valueOf(1688711640311L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("    \n");
 request.setCharacterEncoding("UTF-8");  
      out.write('\n');
      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Oracle DB Connection</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");

		//변수 초기화     //JSP 블락내에서 주석 
		Connection conn = null;      
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:XE"; 
			
		try {
			Class.forName(driver); 	//오라클 드라이버를 로드함 
			conn = DriverManager.getConnection (url, "C##HR2", "1234"); 

		}catch (Exception e) {
			e.printStackTrace(); 
		}

	
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
      out.write("\n");
      out.write("    \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");


	//Form 에서 넘겨주는 변수를 받어서 새로운 변수에 담기 
	String na = request.getParameter("name"); 
	String em = request.getParameter("email");
	String sub = request.getParameter("subject");
	String cont = request.getParameter("content");
	String pw = request.getParameter("password");
	//답변글을 처리하기 위한 변수 3개 : mid, rnum, step 
	int mid = Integer.parseInt(request.getParameter("mid")); 
		//DB : masterid : 동일 글의 그룹핑 
				// 처음글, 답변글일때 
	int rnum= Integer.parseInt(request.getParameter("rnum")); 
		//DB : replaynum
	int step= Integer.parseInt(request.getParameter("step"));
		//DB : step  : 글의 깊이를 처리하는 컬럼 
			// 처음글 : 0   , 답변글 : 1,  답변글의답변 : 2, 답변글의 답변글의 답변 : 3
	
	//날짜를 한국 포멧에 맞도록 변환해서 저장함. 
	java.util.Date yymmdd = new java.util.Date();
	SimpleDateFormat myformat = new SimpleDateFormat("yy-MM-d h:m a"); 
	String ymd = myformat.format(yymmdd); 
	
	
	int id = 0 ;    // DB의 ID 컬럼의 최대 값을 가져와서 +1 해서 저장함. 
	
	
	//폼에서 넘어온 변수가 잘 들어오는지 출력 
	
	/* 
	out.println (na + "<p/>"); 
	out.println (em + "<p/>");
	out.println (sub + "<p/>");
	out.println (cont + "<p/>");
	out.println (pw + "<p/>");
	out.println (mid + "<p/>");
	out.println (rnum + "<p/>");
	out.println (step + "<p/>");
	out.println (yymmdd + "<p/>");
	out.println (ymd + "<p/>");
	if (true) return; 
	*/

	//DB에 저장할 쿼리 
	String sql = null; 
	Statement stmt = null; 
	PreparedStatement pstmt = null; 
	ResultSet rs = null;
	
	//글을 넣기 위해서 DB의 ID의 Max 값을 가져온후 + 1 으로 처리 

	sql ="select max(id) from freeboard"; 
	stmt = conn.createStatement(); 
	rs = stmt.executeQuery(sql); 
	
	if ( !(rs.next())){			//테이블에 저장된 레코드가 없다. (처음글 작성)
		id = 1 ; 
	} else {	//레코드가 존재할때 (최대값을 가지고 옴)
		id = rs.getInt(1) + 1 ; 
	}
	
	//out.println (id); 
	
	//답변 글이므로 step 값을 + 1
	//step : 글의 깊이를 처리하는 컬럼 
		//처음글 : 0 , 답변글 : 1, 답변의 답변 : 2 
	step +=1 ; 		//step = step + 1; 
	
	if ( step == 1 ) {
		sql = "select max(replaynum) from freeboard where masterid = " + mid ; 
		rs = stmt.executeQuery(sql); 
		
		if (!(rs.next())){
			rnum = 1; 
		}else {
			rnum = rs.getInt(1)+1 ; 
		}
	}
	
	//모든 변수가 처리된 내용을 DB에 저장 함 
	
	//PreparedStatement 객체로 처리 
	sql = "insert into freeboard (id, name, password, email,subject, ";
	sql += "content, inputdate, masterid, readcount, replaynum, step) ";
	sql += "values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)" ;
	
	//pstmt 객체 생성 
	pstmt = conn.prepareStatement(sql); 
	
	//pstmt 에 ? 변수값을 넣음. 
	pstmt.setInt(1, id)	; 	
	pstmt.setString(2, na); 		
	pstmt.setString(3, pw);
	pstmt.setString(4, em);
	pstmt.setString(5, sub);
	pstmt.setString(6, cont);
	pstmt.setString(7, ymd);
	pstmt.setInt(8, mid)	; 
	pstmt.setInt(9, 0)	; 
	pstmt.setInt(10, rnum); 
	pstmt.setInt(11, step)	; 
	
	
	//pstmt 실행 

	int result = 0 ;   // 0 : insert 실패 , 1 : insert 성공  
	result = pstmt.executeUpdate(); 
	
	/* 
	if ( result >= 1){
		out.println ("DB 에 Insert 가 잘 되었습니다. ");
	} else {
		out.println ("DB 에 Insert 가 실패 되었습니다 "); 
	}
	*/
	
	
	//PreparedStatement 처리 

	//DB에 잘 저장후 freeboard_list03.jsp 페이지로 이동 , go 변수에 페이지 번호를 넣어서이동 
	response.sendRedirect("freeboard_list03.jsp?go="+ request.getParameter("page")); 



      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
