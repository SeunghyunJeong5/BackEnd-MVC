/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-07 07:39:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.freeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.*;
import java.sql.*;

public final class freeboard_005fsave03_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/freeboard/conn_oracle.jsp", Long.valueOf(1688711640311L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("<!--  필요한 라이브러리 Import -->\n");
      out.write("\n");
      out.write("<!-- DB include -->\n");
      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Oracle DB Connection</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");

		//변수 초기화     //JSP 블락내에서 주석 
		Connection conn = null;      
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:XE"; 
			
		try {
			Class.forName(driver); 	//오라클 드라이버를 로드함 
			conn = DriverManager.getConnection (url, "C##HR2", "1234"); 

		}catch (Exception e) {
			e.printStackTrace(); 
		}

	
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
      out.write("\n");
      out.write("<!-- form 에서 넘어오는 값의 한글 처리  -->\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write("\n");
      out.write("\n");
      out.write("<!-- form에서 넘어오는 데이터는 모두 String 으로 넘온다. \n");
      out.write("	Integer.perseInt() \n");
      out.write(" -->\n");
      out.write(" \n");
      out.write(" <!-- form에서 넘어오는 변수의 값을 받아서 새로운 변수에 할당  -->\n");
      out.write(" ");

 	/*  */
 	 String na = request.getParameter("name"); 
	 String em = request.getParameter("email"); 
	 String sub = request.getParameter("subject"); 
	 String cont = request.getParameter("content"); 
	 String pw = request.getParameter("password"); 
	 
	 int id = 1; 	//id에 처음 값을 할당 할때 기본값으로 1을 할당. 
	 				//다음부터는 테이블의 id 컬럼에서 Max 값을 가져와서 +1해서 처리 
 
 	//날짜 처리 
 	java.util.Date yymmdd = new java.util.Date(); 
	//out.println(yymmdd); 		//Thu Jan 12 11:16:18 KST 2023
	SimpleDateFormat myformat = new SimpleDateFormat("yy-MM-d h:m a"); 
	String ymd = myformat.format(yymmdd); 
	//out.println(ymd); 		//23-01-12 11:13 오전
	
	//DB에 값을 처리할 변수 선언 : Connection (conn) <== Include 되어 있음. 
	String sql = null; 
	Statement stmt = null; 
	PreparedStatement pstmt = null; 
	ResultSet rs = null;       //id 컬럼의 최대값을 select 
	
	
	try {
	//DB에서 값을 처리 
	
	stmt = conn.createStatement(); 
	sql = "select max(id) from freeboard"; 	//id : Primary Kety 
	
	rs = stmt.executeQuery(sql); 
	
	//rs.next(); 
	
	//out.println(rs.getInt(1) + "<p/>"); 
	
	//if (true) return; 
	
	//테이블의 id 컬럼의 값을 적용 : 최대 값을 가져와서 + 1 
	if (!(rs.next())){	//테이블의 값이 존재하지 않는 경우 
		id =  1; 
	}else {			//테이블의 값이 존재 하는 경우 
		id = rs.getInt(1) + 1 ; 		
	}
	
	//Statment 객체는 변수값 을 처리하는 것이 복잡하다. PareparedStatement 를 사용한다. 
	//폼에서 넘겨받은 값을 DB에 insert 하는 쿼리 (주의 : masterid : id컬럼에 들어오는 값으로 처리해야함)
	sql = "insert into freeboard (id, name, password, email, "; 
	sql += "subject,content, inputdate, masterid,readcount,replaynum,step ) " ;		
	sql += "values ( ?,?,?,?,?,?,?,?," ;
	sql +=  "0 , 0 , 0)";
	
	//PreparedStatement 객체 생성
		//객체 생성시 sql 구문을 넣는다. 
	pstmt = conn.prepareStatement(sql);
	
	
	
	//<<시작>>레코드 1000개 입력 : for
	//for (int i = 1; i<=1000; i++){
		
			//id = i;
	
				
	
	
	//?에 변수값을 할당 
	pstmt.setInt(1, id);		//int  
	pstmt.setString(2, na);
	pstmt.setString(3, pw);
	pstmt.setString(4, em);
	pstmt.setString(5, sub);
	pstmt.setString(6, cont);
	pstmt.setString(7, ymd);
	pstmt.setInt(8, id);		//int 
	
	pstmt.executeUpdate();    
//	}
	
	
	
	
	
	
	//out.println (sql); 
	//if (true) return ; 			//프로그램을 중지 시킴. 디버깅할때 사용함. 
	
	//stmt.executeUpdate(sql);  //DB 저장 완료 , commit 을 자동으로 처리 
	
	}catch (Exception e) {
		out.println("예상치 못한 오류가 발생했습니다. <p/>" ); 
		out.println("고객 센터 : 02-1111-1111 <p/>" ); 
		
	}finally {
		if ( conn != null) conn.close(); 
		if ( stmt != null) stmt.close();
		if ( rs != null) rs.close(); 
	}
	// Try catch 블락으로 프로그램이 종료 되지 않도록 처리후 객체 제거 
 
      out.write("\n");
      out.write(" \n");
      out.write(" <!--  \n");
      out.write(" 	페이지 이동 : \n");
      out.write(" 		response.sendRedirect : 클라이언트에서 페이지를 재요청  : URL 주소가 바뀜\n");
      out.write(" 		forward : 서버에서 페이지를 이동 : URL 주소가 바뀌지 않는다. \n");
      out.write(" \n");
      out.write("  -->\n");
      out.write(" \n");
      out.write(" ");
 // response.sendRedirect("freeboard_list.jsp"); 
      out.write("\n");
      out.write(" \n");
      out.write(" \n");
      out.write(" ");
      if (true) {
        _jspx_page_context.forward("freeboard_list03.jsp");
        return;
      }
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
