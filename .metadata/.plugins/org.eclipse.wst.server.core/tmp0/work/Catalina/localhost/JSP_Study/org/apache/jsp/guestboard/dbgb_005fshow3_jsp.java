/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-07 08:21:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guestboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.sql.*;

public final class dbgb_005fshow3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/guestboard/../DB_Connection/db_conn_oracle.jsp", Long.valueOf(1688629580125L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!-- DB의 값을 읽어와서 출력하는 페이지 : ResultSet 객체를 사용 -->    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- DB Connection -->\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write(" \r\n");
      out.write("\r\n");

Connection conn = null;		//Connection 객체 변수 초기화
String driver = "oracle.jdbc.driver.OracleDriver";		//driver에 ("안의 내용 할당)
String url = "jdbc:oracle:thin:@localhost:1521:XE";

try{
Class.forName(driver);	//외부드라이버가 있는지 확인.(해당 경로에 OracleDriver 클래스가 존재하는지 확인)
conn = DriverManager.getConnection(url, "C##HR2", "1234");
} catch (Exception e){
}



      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// ResultSet rs 의 값을 저장하는 ArrayList 선언
	// ArrayList 는 컬랙션 : 동일한 자료형을 저장하고 무한정 늘어남.
	ArrayList name = new ArrayList();
	ArrayList email = new ArrayList();
	ArrayList inputdate = new ArrayList();
	ArrayList subject = new ArrayList();
	ArrayList content = new ArrayList();


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//DB를 접속해서 값을 읽어옴, Select 쿼리 (변수값이 없이 DB에서 읽어오는 쿼리)
	
	String sql = null;
	PreparedStatement pstmt = null;
	
	ResultSet rs = null;	//DB에서 읽어온 레코드셋을 저장하는 객체

	//SQL 쿼리
	sql = "select * from guestboard order by inputdate desc";
	
	//Preparedstatement 객체 활성화
	pstmt = conn.prepareStatement(sql);
	
	//SQL쿼리에 ?가 없으므로 바로 실행.
	
	//rs는 select한 결과 레코드셋을 담고있다.
	rs = pstmt.executeQuery(); 		//sql 쿼리가 Select문인 경우 ==> stmt.excuteQuery(sql) (insert, update, delete이런거 하는문이랑 다름),
										//rs 에 select한 레코드들이 저장됨.

	
	


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("	<style>\r\n");
      out.write("		div{\r\n");
      out.write("		width : 600px;\r\n");
      out.write("		margin : 0 auto;\r\n");
      out.write("		}\r\n");
      out.write("		table, tr, td{\r\n");
      out.write("		padding : 5px;\r\n");
      out.write("		border-collapse : collapse;}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1> DB에서 값을 읽어와서 출력하는 페이지 </h1>\r\n");
      out.write("\r\n");
      out.write("<!-- DB의 내용을 출력하는 페이지 -->\r\n");
      out.write("<div>\r\n");
      out.write("\r\n");
      out.write("\r\n");



	

      out.write("\r\n");
      out.write("	<table width =\"600px\" border =\"1px\">\r\n");
      out.write("		<tr> <th>이름</th> <th>메일주소</th> <th>날짜</th> <th>제목</th> <th>내용</th> </tr>\r\n");
      out.write("		\r\n");
      out.write("		");
 if( rs.next() ){
			
			
			do{
				
				// rs의 각 필드의 값을 ArrayList에 저장	
				name.add(rs.getString("name"));				//뒤의 name은 DB에서 가져와서 앞의 name ArrayList에 넣는것.
				email.add(rs.getString("email"));
				inputdate.add(rs.getString("inputdate"));
				subject.add(rs.getString("subject"));
				content.add(rs.getString("content"));

			}while (rs.next());
		
		}else{
			out.println("DB에 값이 존재하지 않습니다. ");
		}
		
		//for 문을 사용해서 ArrayList에 저장된 내용을 출력
		for(int i = 0; i<name.size(); i++){
			
		
		
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<tr> <td>");
      out.print(name.get(i) );
      out.write("</td> <td>");
      out.print(email.get(i) );
      out.write("</td> <td>");
      out.print(inputdate.get(i) );
      out.write("</td> <td>");
      out.print(subject.get(i) );
      out.write("</td> <td>");
      out.print(content.get(i) );
      out.write("</td> </tr>\r\n");
      out.write("		\r\n");
      out.write("		");

		}
		
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</table>\r\n");
      out.write("	<p /><p /><p /><p />\r\n");
      out.write("\r\n");


	



      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
