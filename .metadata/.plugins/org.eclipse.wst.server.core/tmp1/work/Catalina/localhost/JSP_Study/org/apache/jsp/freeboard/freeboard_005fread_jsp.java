/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-07-07 07:47:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.freeboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.text.*;
import java.sql.*;

public final class freeboard_005fread_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/freeboard/conn_oracle.jsp", Long.valueOf(1688711640311L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Oracle DB Connection</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	");

		//변수 초기화     //JSP 블락내에서 주석 
		Connection conn = null;      
		String driver = "oracle.jdbc.driver.OracleDriver";
		String url = "jdbc:oracle:thin:@localhost:1521:XE"; 
			
		try {
			Class.forName(driver); 	//오라클 드라이버를 로드함 
			conn = DriverManager.getConnection (url, "C##HR2", "1234"); 

		}catch (Exception e) {
			e.printStackTrace(); 
		}

	
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>컬럼의 특정 레코드를 읽는 페이지 </title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	<!-- JSP 코드 블락 -->\n");
      out.write("	");

		//SQL 쿼리를 사용할 변수 선언 블락 
		String sql = null; 
		Statement stmt = null; 
		PreparedStatement pstmt = null; 	//변수를 ? 로 처리함.
		ResultSet rs = null; 
		
		//Get 방식으로 넘어오는 변수 값을 저장 
		//String 형식으로 모두 넘어 온다. Integer.PerseInt();
		int id = Integer.parseInt(request.getParameter("id")) ; 
		
		
		
		/*   Statement 객체를 사용해서 처리
		sql = "select * from freeboard where id = " + id  ;
		 
		stmt = conn.createStatement(); 
		rs = stmt.executeQuery(sql);
		*/
		
		//PreparedStatement 객체를 사용해서 처리 , 변수에 들어가는 값을 ? 로 처리함. 
				// 매번컴파일 하지 않기 때문에 처리속도가 빠름 
		sql = "select * from freeboard where id = ?"; 
		pstmt = conn.prepareStatement(sql);      //pstmt 객체 생성시 sql 문을 넣는다. 
		pstmt.setInt(1, id);     //1 첫번째 물은표, 들어갈 변수 
		rs = pstmt.executeQuery();  	//select 문인 경우 executeQuery() 
										//insert, update, delete문인경우 : executeUpdate()
		
		if (rs.next()){
		
	
      out.write("\n");
      out.write("\n");
      out.write("	<table width='600' cellspacing='0' cellpadding='2' align='center'>\n");
      out.write("			   <tr>\n");
      out.write("			   <td height='22'>&nbsp;</td></tr>\n");
      out.write("			   <tr align='center'>\n");
      out.write("			   <td height='1' bgcolor='#1F4F8F'></td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center' bgcolor='#DFEDFF'>\n");
      out.write("			   <td class='button' bgcolor='#DFEDFF'> \n");
      out.write("			   <div align='left'><font size='4'> 글제목 : ");
      out.print( rs.getString("subject") );
      out.write("</div> </td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center' bgcolor='#FFFFFF'>\n");
      out.write("			   <td align='center' bgcolor='#F4F4F4'>\n");
      out.write("			   <table width='100%' border='0' cellpadding='0' cellspacing='4' height='1'>\n");
      out.write("			   <tr bgcolor='#F4F4F4'>\n");
      out.write("			   <td width='13%' height='7'></td>\n");
      out.write("			   <td width='51%' height='7'>글쓴이 : ");
      out.print( rs.getString("name") );
      out.write("</td>\n");
      out.write("			   <td width='25%' height='7'></td>\n");
      out.write("			   <td width='11%' height='7'></td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr bgcolor='#F4F4F4'>\n");
      out.write("			   <td width='13%'></td>\n");
      out.write("			   <td width='51%'>작성일 : ");
      out.print( rs.getString("inputdate") );
      out.write("</td>\n");
      out.write("			   <td width='25%'>조회 : ");
      out.print( rs.getString("readcount") );
      out.write("</td>\n");
      out.write("			   <td width='11%'></td>\n");
      out.write("			   </tr>\n");
      out.write("			   </table>\n");
      out.write("			   </td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center'>\n");
      out.write("			   <td bgcolor='#1F4F8F' height='1'></td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center'>\n");
      out.write("			   <td style='padding:10 0 0 0'>\n");
      out.write("			   <div align='left'><br>\n");
      out.write("			   <font size='3' color='#333333'> <pre> ");
      out.print( rs.getString("content") );
      out.write(" </pre>  </div>\n");
      out.write("			   <br>\n");
      out.write("			   </td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center'>\n");
      out.write("			   <td class='button' height='1'></td>\n");
      out.write("			   </tr>\n");
      out.write("			   <tr align='center'>\n");
      out.write("			   <td bgcolor='#1F4F8F' height='1'></td>\n");
      out.write("			   </tr>\n");
      out.write("	 </table>\n");
      out.write("	 \n");
      out.write("	 ");

	 
		}else{
			out.println("해당 레코드는 존재하지 않습니다. "); 
		}
	 
	 
      out.write("\n");
      out.write("			  \n");
      out.write("		\n");
      out.write("   <table width=\"600\" border=\"0\" cellpadding=\"0\" cellspacing=\"5\" align=\"center\">\n");
      out.write("	<tr> \n");
      out.write("		<td align=\"right\" width=\"450\">\n");
      out.write("			<A href=\"freeboard_list03.jsp?go=");
      out.print( request.getParameter("page") );
      out.write("\"><img src=\"image/list.jpg\" border=0></a></td>\n");
      out.write("		<td width=\"70\" align=\"right\">\n");
      out.write("			<A href=\"freeboard_rwrite.jsp?id=");
      out.print( request.getParameter("id") );
      out.write("&page=");
      out.print( request.getParameter("page") );
      out.write("\"> <img src=\"image/reply.jpg\" border=0></A></td>\n");
      out.write("		<td width=\"70\" align=\"right\">\n");
      out.write("			<A href=\"freeboard_upd.jsp?id=");
      out.print( id );
      out.write("&page=");
      out.print( request.getParameter("page") );
      out.write("\"><img src=\"image/edit.jpg\" border=0></A></td>\n");
      out.write("		<td width=\"70\" align=\"right\">\n");
      out.write("			<A href=\"freeboard_del.jsp?id=");
      out.print( id );
      out.write("&page=");
      out.print( request.getParameter("page") );
      out.write("\">\n");
      out.write("			<img src=\"image/del.jpg\"  border=0></A></td>\n");
      out.write("	</tr>\n");
      out.write("  </table>\n");
      out.write("\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
      out.write("\n");

//읽기 페이지 마지막에서 글 조회수를 늘려준다. 
sql = "update freeboard set readcount= readcount +1 where id =" + id ; 

//Statement 객체의 insert/update/delete 쿼리인 경우 executeUpdate(sql) 를 실행 
//Statement 객체의 select 쿼리인 경우 executeQuery(sql) 를 실행 , ResultSet 객체로 리턴
stmt = conn.createStatement(); 
stmt.executeUpdate(sql); 


      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
